* {
  margin: 0;
  padding: 0;
}

.container {
  text-align: center;
  /* Sets up a two-column grid layout for the container.
    The second column is four times wider than the first.
    Adds a 4px gap between grid items. */
  display: grid;
  grid-template-columns: 1fr 4fr;
  gap: 4px;
}

.container div {
  padding: 15px;
  font-size: 32px;
  font-family: Helvetica;
  font-weight: bold;
  color: white;
}

.header {
  background-color: #393f4d;
  /* Creates a two-column grid for the header.
     Spans the header across both columns of the parent container. */
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-column: 1 / 3;
}

.logo {
  justify-self: start;
}

.menu {
  align-self: center;
}

.menu ul,
.menu li {
  font-size: 16px;
  list-style-type: none;
}

.menu ul {
  /* Creates a four-column grid within the menu's unordered list. */
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}

.sidebar {
  background-color: #C50208;
  /* Adds a 50px gap between sidebar items.
     Positions the sidebar from the second row to the fourth row. */
  gap: 50px;
  display: grid;
  grid-row: 2 / 4;
}

.sidebar .photo {
  background-color: white;
  color: black;
  font-size: 12px;
  font-weight: normal;
  border-radius: 10px;
}

.side-content, .photo {
  /* The text elements in the sidebar are centered with grid */
  /* Centers text elements within the sidebar using grid layout. */
  display:grid;
  align-items: center;
}

.sidebar .side-content {
  background-color: white;
  color: black;
  font-size: 16px;
  font-weight: normal;
}

.nav {
  background-color: #C50208;
  grid-column: 2 / 3;
}

/* The ul inside the nav element contains another grid */
.nav ul {
  list-style-type: none;
  /* Creates a three-column grid within the nav's unordered list. */
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}
.nav ul li {
  font-size: 16px;
  text-transform: uppercase;
}

.article {
  background-color: #bccbde;
  /* 
  Creates a responsive grid layout for the article.
  */
  display: grid;
  /* 
  Uses repeat(auto-fit, minmax(250px, 1fr)) to create flexible columns.
  auto-fit: Adjusts the number of columns based on available space.
  minmax(250px, 1fr): Sets a minimum column width of 250px and allows columns to grow to fill the available space (1fr).
  */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  /* 
  Adds a 15px gap between grid items.
  */
  gap: 15px;
  /* 
  Positions the article in the second and third columns of the parent grid.
  */
  grid-column: 2 / 3;
}

.article p {
  font-size: 18px;
  font-family: sans-serif;
  color: white;
  text-align: left;
}

.article .card {
  background-color: #FFFFFF;
  color: black;
  text-align: center;
  /*
  The card elements inside the article container have a height
  of 200px
  */
  /* Sets a fixed height of 200px for card elements. */
  height: 200px;
}

.card p {
  color: black;
  font-weight: normal;
  font-size: 14px;
  padding: 5px;
}

.card .title {
  font-size: 18px;
  text-align: center;
}

.footer {
  background-color: #393f4d;
  /* The header and footer span across both columns */
  /* Makes the footer span across both columns of the parent container. */
  grid-column: 1 / 3;
}

.footer p {
  font-size: 13px;
  font-weight: normal;
}